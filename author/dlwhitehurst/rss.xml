<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ciwise.com</title>
   
   <link>http://ciwise.com</link>
   <description>Your dreams. Our design</description>
   <language>en-us</language>
   <managingEditor> David L. Whitehurst</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Welcome to CI Wise</title>
	  <link>//welcome-to-ci-wise</link>
	  <author>David L. Whitehurst</author>
	  <pubDate>2016-01-30T12:43:00-05:00</pubDate>
	  <guid>//welcome-to-ci-wise</guid>
	  <description><![CDATA[
	     <p>Welcome to CI Wise. We're dedicated to being a company that's focused on helping Enterprise be world-class. Are you wise to continuous improvement? Every successful business is on a quest to be better. Our job is to help you get there. Your dreams can be our designs. Tell us more, we're here to help.</p>





	  ]]></description>
	</item>

	<item>
	  <title>Loyalty and Respect</title>
	  <link>//loyalty-and-respect</link>
	  <author>David L. Whitehurst</author>
	  <pubDate>2016-01-29T06:01:00-05:00</pubDate>
	  <guid>//loyalty-and-respect</guid>
	  <description><![CDATA[
	       <p>I've been using computing machines since about 1979. I'm a electrical/electronics engineer by education and software developer/programmer by trade. Sometime in the mid 1980's I convinced my superiors to allow me to push our wide area network to it utmost limits. We were using Windows then and the mainframe connectivity was already utilized to it potential and full capability. Windows was going to open the office and provide access to this complicated world of already communicating computing machines and let non-technical types into the very information we were gathering for them. Windows succeeded. Today, any square-headed citizen of the world, with a little money in his pocket, can purchase a computing machine and join the world of pointy-heads like me. But beware, you may not control this machine, it may control you.</p>

  <p>I pushed Windows NT 4.0 to its very limits on a 3D Computer Aided Design (CAD) project between about 1995 and 1998. Myself and my teammates wrote very complicated software with the expectation that it would run correctly on 4-processor sophisticated graphical workstation PCs. For the most part, our software performed exquisitely. Sometimes we had to put in bug tickets with Microsoft. And, we never got resolution to any problem submitted. We could only go as deep as the operating system would allow us to go. That was to what's called an application programming interface or API. And, this API had to be purchased. Anyone can program to this API but the tools and documentation had to be purchased. I'll oversimplify things, but e.g. a method might add two numbers together. We would call this method, sending 2 and 2 as inputs and the result would be 5. The documentation described what the method would do but the results were not what we expected. This is when I lost my respect for the Windows operating system. This was about 1997. And, most of my readers probably don't realize that somone allowed the illegal release of the OS to the public about that time. This why we have continual issues with malicious software like viruses and malware. This is also why there's a huge economy built on virus protection for Windows.</p>

  <p>Quite some time before my deep exposure to Windows NT, I had a $40,000 PC on my desk at work that ran some form of POSIX-based (UNIX) operating system. This OS was developed by some very smart people at ATT/Bell labs. I was writing programs to improve construction operations for making nuclear submarines. The machine I was given to use was very similar to the ones used to create Jurassic Park the movie. This OS was solid and performed as expected. The folks that developed it were not focused on corporate profit and mass-marketing. I respected the work of these individuals and still do today. A UNIX variant is available today called Linux and it's entire codebase is publicly available to anyone in the world (well, maybe some countries may be under export denial for security aspects). This truly open and solid operating system exists today with full disclosure of all of its source code. I have used it on many different computers (hardware), and I've never run a virus software or malware product except on my macbooks. The mac's OS-X uses some of a POSIX-based (UNIX) operating system architecture, however they install some of their own protections with the OS itself. I can truly say that I've not even come across a true UNIX/Linux virus protection software over the course of my career.</p>

  <p>I had lost my respect for Windows earlier not because I had to strip and re-install my Windows floppy disks every 3 months, but because the OS I used at work was not as solid as the one I used at home now. I was using Linux that I installed on a Toshiba laptop that came with Windows. And, I actually had the Linux code and compiled the OS myself custom to this laptop so the OS worked in every capacity and all of components of the laptop performed as expected. Pay close attention to the word expected. I now had a portable personal computer for writing any kind of machine instruction and if anything didn't work, I could dig in and find out why. I loved Linux then and stil do today.</p>

  <p>Throughout the years, I've worked for employers that have used Microsoft Windows for office machines and workstations. My dislike for Windows has always been the fact that the operating system has always been open to Microsoft but not the open-source community of developers around the world that govern themselves, their processes, their creations, and their actions. I purchased my first Apple product in 2007 when I started my own business because I couldn't find a job then. I loved it more than Linux because the hardware was exquisite and Linux was available to me again for work deep within Apple's OS-X. Yes, Apples are UNIX-like machines that can't run Windows natively. The catch comes with the fact that everything on the graphic-side of the Macintosh is proprietary to Apple including their hardware architecture. And, even though Apple has chosen not to use an open sub-system for it's graphics input/output (I/O), it's second to none in terms of quality and appeal to the public. So, I like Apple computers, but I can't say I love them. They beat the Windows computer where it comes to enjoyment and use of the machine. They cost more and rightly so because you get what you pay for. I can't love them yet because they are not true (POSIX) UNIX/Linux machines. OS-X contains pieces of the Berkley Software Distribution (BSD) which open and available to the public, however it's graphical system is written using Objective-C (UNIX uses C) and it came from a company called NeXT, formed by Steve Jobs. Apple owns the copyrights to this software currently.</p>

<p>My post is titled "Loyalty and Respect". This post is really not about loyalty and respect but about likes and dislikes of the operating systems I've had the priviledge of using. I also, haven't discussed Solaris or embedded operating systems even though I've written software to instruct some machines using these too. I kept my discussion to Windows, NIX, and Apple because loyalty and respect takes time. I've had quite some time to have respect for all three and still maintain my loyalty to Linux. Let's compare respect to liking something and loyalty to loving something. Like is a feeling and love is a promise. I like Windows, Apple, and Linux, but I truly love Linux. Several factors have brought me to these conclusions.</p>

<p>Before Christmas this past year, I purchased a very inexpensive Windows laptop. It came with Windows 10. I had accepted the use of Windows 7, hated Windows 8, and now I actually had a home computer with Windows 10 on it and liked it. As $250 compares to $2500, the windows laptop held its own compared to the macbook pros I've owned. I now had a new personal computer at home with Windows for the first time since 2007. Windows was off my dislike list again. My macbooks are used for most of my software development and I have recently installed the latest OS-X called El Capitan. Almost immediately I started with problems. My graphics display started locking periodically and then the machine wouldn't boot. I would start the computer and it would hang. I use a TimeMachine backup on a USB portable disk drive so I've been able to restore the machine. Apple led me through the restore the first time because the local restore was not acting as I expected. I had a few months without trouble because I've been using my Windows laptop for software development. I've generally loved my macbooks and I've shown my loyalty by purchasing lots of expensive software for them. That's changed. Let's say while I have great respect (like) for Apple and their promise to provide OS-X updates for free (providing you're at Snow Leopard or greater) they crossed a line with me when they 1) removed root access to parts of the filesystem and 2) changed their allowance of unsigned kernel extensions. Long story short, they affected that openness I've felt since the purchase of my first macbook pro. I've had 3 macbook pros but my brand loyalty is gone. I cannot promise anyone that my next laptop, tablet, or PC will be an Apple product.</p>

<p>In conclusion, this is why I respect (like) Windows, Apple, and Open-Source operating systems. I'll continue to show my loyalty to NIX systems because where I have the choice of OS, it will always be Linux or some form of UNIX variant. I love open-source software because I am not at the mercy of some company when something doesn't work right. I've been working on my newest (that's the irony) macbook pro for the last 2 days and I think that El Capitan has some little bug that's causing my kernel panics. I think they dropped one of their kernel extensions or modified one to include a model change in graphics cards maybe. I've been very angry about it so the proactive approach has been to write a blog post while the status bar on my macbook creeps along through another painful restoration. And, I can let everyone know that I actually like Windows 10. Good job Microsoft. And, thanks guys at Git for whipping us up a bash terminal using MINGW64. You rock! I'm not going to type the 3 letter dir when I can do the same thing with 2 and ls.</p>




	  ]]></description>
	</item>

	<item>
	  <title>Open Source Development Training</title>
	  <link>//open-source-web-development-training</link>
	  <author>David L. Whitehurst</author>
	  <pubDate>2016-01-17T05:31:00-05:00</pubDate>
	  <guid>//open-source-web-development-training</guid>
	  <description><![CDATA[
	     <p>Enterprise software development today is very tricky. And, it's quite expensive. You may have an incongruent mess of applied technology that's outdated and not performing well. You may be thinking about a new IT startup business and don't know where to begin. The choice of technology today is overwhelming. You can have it all but you need a planand that's difficult. Maybe your software as a service (SaaS) application is outdated, performing poorly, difficult to maintain, and your expert developers have chased the recruiters to another hot opportunity. As an enterprise in the IT space, you need to change with the technology, costly or otherwise. And, whether the paradigm of the day models inequitable employees that hold no sense of ownership, you need to train your development staff. Fact.</p>

<p>Talented enterprise developers also acquire business knowledge. And, this may be more valuable than their knowledge of the current technologies. We'll get to those in those in the next paragraph. The business knowledge is proprietary and most valuable to you as an employer. And, I haven't seen many easy-to-understand applications at any place of business. In the last decade I've  developed new applications and worked on existing applications of all kinds. My position has always been one where I fixed the most difficult problems or roughed out the architecture of complex business problems.</p> 

<p>Changes in technology should be secondary. The business requirement should be fixed. And, yet to be competitive we know that business changes as needed. Let's consider a high-level business requirement that doesn't change. There are many ways to deliver software that satisfies this requirement. And, the implementation may take some time to complete. There can be many solutions ranging from useless to delightful. Sometimes an excellent solution becomes slow and very difficult to manage and/or change. This is not usually the case because the design was not considered or scalability factors were not discussed initially. Quite often, long-running software projects do not refactor on an architectural scale. This is almost imperative today.</p>

<p>Sometimes architectures change beyond patterns yet to be documented. An example of this is responsive web design. Enterprise adopted Java early on and I bet many commercial or proprietary web applications, still hosted on server clusters, are slow today and provide an almost irritating user experience. And, why are these applications not fixed right away? Well, this is quite possibly because the team of developers, that didn't write the first version of the application, are spending most of their time trying to understand the original business requirements. The technology they brought with them isn't helping their understanding of the business logic. I'll ask another question. Why can't this group refactor the entire application on an architectural,technology, or platform level? It's because the business can't accept the fact that they need to be as agile as their competition. Or, could it be that their staff doesn't have the expertise to refactor the application architecture?</p>

<p>I don't know whether responsive web design is well-documented at this point or considered to be an architecture pattern. It should be. The original developers that created our bloated old MVC server monolith learned about it from some open source site or from an AngularJS Youtube video. I found that my wife was getting tired of me being buried in an IRC client (geek chat room) and spending long hours training myself for my next gig. While you pay your developers to work on your outdated applications (investments) that increase in cost of ownership daily, they're staying up late nights so they can go to work somewhere they feel a sense of ownership and experience the success of their hard work.</p>

<p>We can train your developers to refactor your enterprise applications to use current technologies. We can also help you plan for platform changes if needed. Best of all, we can train your development staff to be world-class because the open source community overall has set the gold-standard for how-to implement quality-tested, bug-free, and truly-secure software code. We will customize our training to support your needs, however we will suggest changes and recommend acceptable options during initial consultations. Our job is to ultimately improve your enterprise software, provide your developers current and practical training, and automate a solid, more agile process. Open-mindedness and acceptance to change is a psychological trait. Process changes occur with executive and managerial directives. Witnessing the success of your team makes it process adoption and not process direction. Are you open to that?</p>

<p>Contact us today. We want you to realize your dreams and value us as a partner in the collaborative design of your next big thing. As CEO of CI Wise, I want to personally guarantee your satisfaction with us and our work. Call me directly at 919-605-6529. My name is David L. Whitehurst and I'll take your calls as long as I can. And, if I don't answer directly, please leave me a message. I will get back to you.</p>    

	  ]]></description>
	</item>

	<item>
	  <title>Enterprise Application Architecture</title>
	  <link>//enterprise-application-architecture</link>
	  <author>David L. Whitehurst</author>
	  <pubDate>2016-01-17T05:31:00-05:00</pubDate>
	  <guid>//enterprise-application-architecture</guid>
	  <description><![CDATA[
	     <p>Enterprise architecture as we know it is changing quickly. Technology is moving so fast that's it's almost impossible to keep up with it. While our new competitors may be hosting their applications on virtual servers in the cloud, we may have made huge investments in our own infrastructure. We don't believe the infrastructure is as important as the instructions that run that infrastructure. This software, these configurations, and specific instructions make up the operating-side of the enterprise architecture as a whole. While your focus should be a continual assessment of the ROI as it relates to your current enterprise architecture, don't ignore the possibility for change. A small investment today may cause a continued improvement in profit tomorrow.</p>

<p>Speak to patterns and frameworks ...J2EE, TOGAF, ITIL</p>

 


	  ]]></description>
	</item>

	<item>
	  <title>Consulting Services</title>
	  <link>//consulting-services</link>
	  <author>David L. Whitehurst</author>
	  <pubDate>2016-01-17T05:31:00-05:00</pubDate>
	  <guid>//consulting-services</guid>
	  <description><![CDATA[
	     <p>CI Wise is the corporate entity that defines me, the founder David L. Whitehurst. I've been instructing computing machines since 1984. I've used languages like SAS, Forth, COBOL, Fortran, Pascal, Basic, Visual Basic, C, C++, Java, Perl, Python, Groovy, Ruby, Scala, and Javascript. I've written web applications for user clients like BMW North America, Honda, Acura, Volkswagen, Audi, Porsche, Owens Corning, Lenscrafter, Michael J. Fox Foundation, Charles Schwab, RBC Bank, State Farm, AllState, Nationwide, NC Department of Agriculture, and the North Carolina Department of Transportation. I have performance tuned the shared Confluence wiki for Yale, Princeton, and Rutgers Universities. I set up JBoss development environments on datacenter infrastructures for the Oklahoma State Bureau of Investigation and the North Carolina Department of Transportation.</p>

<p>Our expertise is Open Source Enterprise software development. Do you have plans to build something for your company? Are you open to hear about the benefits of open source software? Do you know that you can use open source in proprietary software? Contact us for an initial consultation at no charge to you.</p>

<p>Contact us today. We want you to realize your dreams and value us as a partner in the collaborative design of your next big thing. As CEO of CI Wise, I want to personally guarantee your satisfaction with us and our work. Call me directly at 919-605-6529. My name is David L. Whitehurst and I'll take your calls as long as I can. And, if I don't answer directly, please leave me a message. I will get back to you.</p>



	  ]]></description>
	</item>

	<item>
	  <title>Enterprise Application Development</title>
	  <link>//enterprise-application-development</link>
	  <author>David L. Whitehurst</author>
	  <pubDate>2016-01-17T05:31:00-05:00</pubDate>
	  <guid>//enterprise-application-development</guid>
	  <description><![CDATA[
	     <p>Application development is costly any way you look at it. Sometimes it looks like all is well and then you're nearing a deadline with some issue that's going to cause significant delays. We're here to help. We can place someone on a part-time basis to help you finish up and meet your deadline. Our consultant/contractors are carefully chosen to be in agreement with my strong principles, character traits, and work ethic. </p>

<p>If you're looking for a development team, we'll build it for you. We can hire the team and implement the software for you. Or we can hire and build a successful team to leave with you when our guidance is no longer needed. We can also contract with you on a temporary basis and provide team leadership or agile training until the team is ready to operate independently.</p> 

<p>Contact us today. We want you to realize your dreams and value us as a partner in the collaborative design of your next big thing. As CEO of CI Wise, I want to personally guarantee your satisfaction with us and our work. Call me directly at 919-605-6529. My name is David L. Whitehurst and I'll take your calls as long as I can. And, if I don't answer directly, please leave me a message. I will get back to you.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Web Development for Mobile Users</title>
	  <link>//web-development-for-mobile-users</link>
	  <author>David L. Whitehurst</author>
	  <pubDate>2016-01-17T05:31:00-05:00</pubDate>
	  <guid>//web-development-for-mobile-users</guid>
	  <description><![CDATA[
	     <p>Today, the internet is viewed by all kinds of devices. These devices generally browse for content using some form of client browser that's written to run on that particular device. And, as developers we've accepted the fact browser choice is a freedom outside of work and sometimes a specification at work. In the workplace there may be no choice. It may be version 13.4 of Internet Explorer and now shut up about it. Enter Browser Wars. It's a game played by all browser-interested parties and web developers hate it. To add to all this confusion, everyone with a data-device (Internet-ready), watches, cell phones, iPads, tablets, laptops big and small, and anything else the world can dream up wants to look at stuff on the internet. We've almost stopped watching TV. We look at monitors and screens now.</p>

<p>For quite some time, this situation was vicious for the web developer. Things are better now but not entirely perfect. We do, however realize that you may want a hosted product that can be used by your office staff indoors and your sales team in the field or on the road. Our development will not box you into doing business our way. These are your dreams. We'll do what you want. If you want an entirely mobile solution we'll do that. And, if you want the best of both worlds we'll do that. There are many architecture options available to all of us today and we can tailor our solution to you. We're flexible. There's no right answer. We will produce the software solution that fits your requirements and provides world-class results.</p>

<p>Contact us today. We want you to realize your dreams and value us as a partner in the collaborative design of your next big thing. As CEO of CI Wise, I want to personally guarantee your satisfaction with us and our work. Call me directly at 919-605-6529. My name is David L. Whitehurst and I'll take your calls as long as I can. And, if I don't answer directly, please leave me a message. I will get back to you.</p> 



	  ]]></description>
	</item>

	<item>
	  <title>A Mule RESTful API Client Connector</title>
	  <link>//mule-restful-api-connector</link>
	  <author>David L. Whitehurst</author>
	  <pubDate>2016-01-09T21:06:19-05:00</pubDate>
	  <guid>//mule-restful-api-connector</guid>
	  <description><![CDATA[
	     <p>I&#39;ve recently been learning about the Mule ESB and Integration platform. I wanted to create my own custom connector to work with a RESTful API and use the data in a Mule flow. The connector was written to connect to an application created using a <a href="http://jhipster.github.io/">JHipster</a> Yeoman 
generator. The beauty of JHipster is the ability to generate a Spring-boot/AngularJS application quickly and also to generate entities with CRUD operations for persistence. JHipster&#39;s Angular(UI) layer uses Spring REST Controllers(Back-end) for it&#39;s CRUD operations. </p>

<p>I choose to create a general account entity in JHipster. The account has a String name and Long id. The connector will call the JHipster API e.g. /api/genaccounts and the returned listing of general accounts (JSON array) will be listed in the browser window using the Mule HTTP connector in the flow design.</p>

<p><img src="/assets/images/mule-3.jpg" alt="mules">
The connector project was created in AnyPoint Studio (Mule&#39;s Eclipse Environment) using 
the AnyPoint Connector Devkit that had to be downloaded and installed in AnyPoint. Devkit can be downloaded here https://docs.mulesoft.com/anypoint-connector-devkit/v/3.8/ . I used version 3.8. This may have changed since this writing. I obtained this software via the Eclipse update process using the IDE. Once I agreed to all the EULA&#39;s that MuleSoft provided, the software installed and I was ready to begin my new connector.</p>

<p>Since, I&#39;ve already created a working connector, I&#39;m going to create a new connector project and document everything as I implement the connector and test it. This way I&#39;ll be sure to note anything difficult or confusing as we go. Let&#39;s open AnyPoint Studio and create a new project. Select File/New/AnyPoint Connector Project or if the choice doesn&#39;t exist, select File/New/Other... and choose the Mule wizard and then select the AnyPoint Connector Project. Press the Next&gt; button to proceed. </p>

<p>The dialog that appears provides two choices for the type of connector project. You will want to select SDK Based and then the Next&gt; button to proceed. </p>

<p>The dialog that is now presented collects metadata for the project. This is where you will name the connector. My connector name is CIWiseREST. You do not have to add the text &quot;connector&quot;. The project generator will do this for you. Please notice that the project name and namespace text boxes will fill automatically as you name the connector itself. Be sure to select the &quot;Generate sample operations and configurable fields&quot; checkbox. We will use a very simple operation to prove that the connector will install and can be used in a Mule flow on a running server instance. The API Type is Java SDK and the Authentication drop down should be set to &quot;None&quot;. We will use authentication but we&#39;ll implement that
code ourselves. Nothing else should be checked. Select Next&gt;.</p>

<p>The dialog presented contains Maven and Github configuration information. We will unselect the Maven default checkbox and add information for the group-id as &quot;org.ciwise.modules&quot;. Select Next&gt;.</p>

<p>This last dialog provides for customization of the connector icon and also a text layer over the icon. I changed the label to read &quot;REST&quot;. That&#39;s it. We&#39;re done and can now select Finish. The code for the project will now be generated.</p>

<p>Two Java classes are generated:
- org.ciwise.modules.ciwiserest.CIWiseRESTConnector.java
- org.ciwise.modules.ciwiserest.config.ConnectorConfig.java</p>

<p>The connector class is called the @Connector class my the MuleSoft folks because this class must be annotated with @Connector. This is not optional. Mule has a code you don&#39;t see that allows the connector to be used in a drag-and-drop window and integrate with other connectors that make up a Mule flow. Here&#39;s a code listing of this class:</p>

<p><strong>Listing 1 - CIWiseRESTConnector.java</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">ciwise</span><span class="o">.</span><span class="na">modules</span><span class="o">.</span><span class="na">ciwiserest</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.mule.api.annotations.Config</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mule.api.annotations.Connector</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mule.api.annotations.Processor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.ciwise.modules.ciwiserest.config.ConnectorConfig</span><span class="o">;</span>

<span class="nd">@Connector</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;ci-wise-rest&quot;</span><span class="o">,</span> <span class="n">friendlyName</span><span class="o">=</span><span class="s">&quot;CIWiseREST&quot;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CIWiseRESTConnector</span> <span class="o">{</span>

    <span class="nd">@Config</span>
    <span class="n">ConnectorConfig</span> <span class="n">config</span><span class="o">;</span>

    <span class="cm">/**</span>
<span class="cm">     * Custom processor</span>
<span class="cm">     *</span>
<span class="cm">     * @param friend Name to be used to generate a greeting message.</span>
<span class="cm">     * @return A greeting message</span>
<span class="cm">     */</span>
    <span class="nd">@Processor</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">greet</span><span class="o">(</span><span class="n">String</span> <span class="n">friend</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/*</span>
<span class="cm">         * MESSAGE PROCESSOR CODE GOES HERE</span>
<span class="cm">         */</span>
        <span class="k">return</span> <span class="n">config</span><span class="o">.</span><span class="na">getGreeting</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">friend</span> <span class="o">+</span> <span class="s">&quot;. &quot;</span> <span class="o">+</span> <span class="n">config</span><span class="o">.</span><span class="na">getReply</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">ConnectorConfig</span> <span class="nf">getConfig</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">config</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setConfig</span><span class="o">(</span><span class="n">ConnectorConfig</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">config</span> <span class="o">=</span> <span class="n">config</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<p>Let&#39;s build the connector and install it into AnyPoint Studio so we can test it with Mule. The connector project when created added the greet() method to the @Connector class because we checked the box to add an example operation. This operation is shown by the greet() method and annotated with the @Processor notation. When the Mule connector is selected in a Mule Project flow, the operations that have been annotated and defined, are selectable in the IDE to be processed during communications across the Mule flow in production. Select the project ci-wise-rest-connector in the Package explorer and right-mouse. Next select AnyPoint Connector at the bottom and then Build Connector. An Apache Maven build will commence. The project should build successfully.</p>

<p>To install the connector for testing, follow the same steps and when the final pop-up menu is shown, select Install or Update. The IDE will install and accept the connector for use when designing a Mule flow. A dialog should be shown when the installation is complete providing confirmation that the install was successful.</p>

<p>To test the connector using Mule, I created a Mule project called muletest. Open the Mule test project and drag an HTTP connector into the Mule Flow view. Set the properties of the connector to use localhost and port 8081. Next, find CIWiseREST in the Mule palette and drag your new connector into the flow beside te HTTP connector. Select your connector in the flow view and double-click. The connector properties window will be shown. Under Basic Settings/Connector Configuration, select the add or plus icon. Select &quot;CIWiseREST__Configuration&quot;. Now select the Operation drop-down and choose &quot;Greet&quot;. The greet method required an input string called friend and under General/Friend: you need to give the operation this String. Enter &quot;John&quot;. When we run the Mule application and give the browser the URL http://localhost:8081 we should expect to see &quot;Hello John. How are you?&quot;. That&#39;s it. It doesn&#39;t do much, however it demonstrates the @Connector and @Process annotations and how they are used with a Mule Flow. </p>

<p>Click in the Mule flow view and the little red X in the upper right of your connector should go away as there are no errors now. Press the Save All icon in the IDE. We are now ready to test our connector. Click on the Mule flow XML file in the Package Explorer and right-mouse. Choose Run-As/Mule Application. When Mule says it&#39;s deployed and successful, open a browser and enter http://localhost:8081. I see &quot;How are you? John. Hello&quot;. I set my configuration backwards. The return statement in the connector
operation method looks like this.</p>

<p><strong>Listing 2 - Snippet from CIWiseRESTConnector.java</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="nd">@Processor</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">greet</span><span class="o">(</span><span class="n">String</span> <span class="n">friend</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/*</span>
<span class="cm">         * MESSAGE PROCESSOR CODE GOES HERE</span>
<span class="cm">         */</span>
        <span class="k">return</span> <span class="n">config</span><span class="o">.</span><span class="na">getGreeting</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">friend</span> <span class="o">+</span> <span class="s">&quot;. &quot;</span> <span class="o">+</span> <span class="n">config</span><span class="o">.</span><span class="na">getReply</span><span class="o">();</span>
    <span class="o">}</span></code></pre></figure>

<p>And, here&#39;s the source for the Configuration.</p>

<p><strong>Listing 3 - ConnectorConfig.java</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">ciwise</span><span class="o">.</span><span class="na">modules</span><span class="o">.</span><span class="na">ciwiserest</span><span class="o">.</span><span class="na">config</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.mule.api.annotations.components.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span><span class="o">(</span><span class="n">friendlyName</span> <span class="o">=</span> <span class="s">&quot;Configuration&quot;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConnectorConfig</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">reply</span> <span class="o">=</span> <span class="s">&quot;Hello&quot;</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s">&quot;How are you?&quot;</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getReply</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">reply</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getGreeting</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">greeting</span><span class="o">;</span>
    <span class="o">}</span>
    
<span class="o">}</span></code></pre></figure>

<p>The greeting should be &quot;Hello&quot; and the reply should be &quot;How are you?&quot;. Delete the connector from the Mule flow view. Swap the Strings, rebuild the connector, and then try to update the installation. I found that for some reason the Maven clean operation would not work. I&#39;m still trying to figure this out, but you can uninstall the connector, delete the target directory in a terminal or file explorer and then build the connector and install it successfully. Do this and re-test the connector using Mule. I just did and everything is fine now.</p>

<p>Now that I&#39;ve shown the Mule integration of the generated connector in the flow view, let&#39;s add a realistic operation to pull a simple list of accounts from a RESTful service and display the listing in the browser. I needed a simple service with a well documented API. My JHipster application will provide the RESTful service using Spring REST
controllers. It also provides a hosted Swagger API listing with the application. I created a simple entity object called &quot;genaccount&quot; with an id, and a String name. We&#39;ll use the JHipster /api/genaccounts call to get our listing.</p>

<p>To start we should create the packages for the client-side, connector entities. These objects will be used when Jackson deserializes the JSON that the JHipster application will send to our connector when we make the api call. Our project package base is org.ciwise.modules.ciwiserest. Create a &quot;base package&quot;.entities package. Before we call for the list of accounts, we must obtain a user authentication token. This token is sent
with all requests. We&#39;ll get the token and keep it in a private String member within the our Jersey client The token is obtained with the REST call /api/authenticate. The JHipster application returns a JSON object like so.</p>

<p><strong>Listing 4 - JSON return POST /api/authenticate</strong></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="s2">&quot;expires&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span>
<span class="p">}</span></code></pre></figure>

<p>The accounts are just String names and this JSON model schema is like so.</p>

<p><strong>Listing 5 - JSON return GET /api/genaccounts</strong></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">[</span>
  <span class="p">{</span>
    <span class="s2">&quot;acctno&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="s2">&quot;accttype&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span>
  <span class="p">}</span>
<span class="p">]</span></code></pre></figure>

<p>Notice the square-brackets around the JSON object. This means that JHipster will be sending an array of JSON objects like the one defined in the curly-braces. I showed both API returns first because I wanted to show the simple data that the JHipster application is sending. On our end, within the connector, we don&#39;t generally use JSON. We want to be able to serialize and deserialize matching Java objects or Plain Old Java Objects (POJOs). And, looking at the JSON above, these Java classes will be very simple. And, why wouldn&#39;t we just create the classes, add the private members, and use Eclipse to create the get() and set() methods now? We&#39;re not going to do that because we need to also annotate the simple Java classes with Jackson 1.x annotations. And, we&#39;re going to use an online utility to generate the classes and annotate them from our JSON schema.</p>

<p>I wasn&#39;t familiar with the <a href="http://wiki.fasterxml.com/JacksonAnnotations">Jackson</a> annotations but I knew what the process did. And, there&#39;s a website called <a href="http://www.jsonschema2pojo.org/">JSONSchema2POJO</a> that will accept JSON schema or JSON and create the POJO classes we need. I&#39;m not going to discuss the operation of the site or how I created the files but I&#39;ll list them here for you to review.</p>

<p><strong>Listing 6 - Token.java</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">ciwise</span><span class="o">.</span><span class="na">modules</span><span class="o">.</span><span class="na">ciwiserest</span><span class="o">.</span><span class="na">entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.annotation.Generated</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.annotate.JsonAnyGetter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.annotate.JsonAnySetter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.annotate.JsonIgnore</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.annotate.JsonProperty</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.annotate.JsonPropertyOrder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.annotate.JsonSerialize</span><span class="o">;</span>

<span class="cm">/**</span>
<span class="cm"> * POJO for mapping with JSON response api/authenticate</span>
<span class="cm"> * </span>
<span class="cm"> * @author David L. Whitehurst</span>
<span class="cm"> *</span>
<span class="cm"> */</span>
<span class="nd">@JsonSerialize</span><span class="o">(</span><span class="n">include</span> <span class="o">=</span> <span class="n">JsonSerialize</span><span class="o">.</span><span class="na">Inclusion</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">)</span>
<span class="nd">@Generated</span><span class="o">(</span><span class="s">&quot;org.jsonschema2pojo&quot;</span><span class="o">)</span>
<span class="nd">@JsonPropertyOrder</span><span class="o">({</span> <span class="s">&quot;expires&quot;</span><span class="o">,</span> <span class="s">&quot;token&quot;</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Token</span> <span class="o">{</span>

    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;expires&quot;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Object</span> <span class="n">expires</span><span class="o">;</span>
    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;token&quot;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Object</span> <span class="n">token</span><span class="o">;</span>
    <span class="nd">@JsonIgnore</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">additionalProperties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>

    <span class="cm">/**</span>
<span class="cm">    * </span>
<span class="cm">    * @return The expires</span>
<span class="cm">    */</span>
    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;expires&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getExpires</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">expires</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**</span>
<span class="cm">    * </span>
<span class="cm">    * @param expires</span>
<span class="cm">    *            The expires</span>
<span class="cm">    */</span>
    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;expires&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setExpires</span><span class="o">(</span><span class="n">Object</span> <span class="n">expires</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">expires</span> <span class="o">=</span> <span class="n">expires</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**</span>
<span class="cm">    * </span>
<span class="cm">    * @return The token</span>
<span class="cm">    */</span>
    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;token&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getToken</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">token</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**</span>
<span class="cm">    * </span>
<span class="cm">    * @param token</span>
<span class="cm">    *            The token</span>
<span class="cm">    */</span>
    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;token&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setToken</span><span class="o">(</span><span class="n">Object</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">token</span> <span class="o">=</span> <span class="n">token</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@JsonAnyGetter</span>
    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getAdditionalProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">additionalProperties</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@JsonAnySetter</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAdditionalProperty</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">additionalProperties</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<p><strong>Listing 7 - Account.java</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">ciwise</span><span class="o">.</span><span class="na">modules</span><span class="o">.</span><span class="na">ciwiserest</span><span class="o">.</span><span class="na">entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.annotation.Generated</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.annotate.JsonAnyGetter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.annotate.JsonAnySetter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.annotate.JsonIgnore</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.annotate.JsonProperty</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.annotate.JsonPropertyOrder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.annotate.JsonSerialize</span><span class="o">;</span>

<span class="nd">@JsonSerialize</span><span class="o">(</span><span class="n">include</span> <span class="o">=</span> <span class="n">JsonSerialize</span><span class="o">.</span><span class="na">Inclusion</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">)</span>
<span class="nd">@Generated</span><span class="o">(</span><span class="s">&quot;org.jsonschema2pojo&quot;</span><span class="o">)</span>
<span class="nd">@JsonPropertyOrder</span><span class="o">({</span>
<span class="s">&quot;acctno&quot;</span><span class="o">,</span>
<span class="s">&quot;id&quot;</span><span class="o">,</span>
<span class="s">&quot;name&quot;</span>
<span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Account</span> <span class="o">{</span>

<span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;acctno&quot;</span><span class="o">)</span>
<span class="kd">private</span> <span class="kt">int</span> <span class="n">acctno</span><span class="o">;</span>
<span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span>
<span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
<span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
<span class="nd">@JsonIgnore</span>
<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">additionalProperties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>

<span class="cm">/**</span>
<span class="cm">* </span>
<span class="cm">* @return</span>
<span class="cm">* The acctno</span>
<span class="cm">*/</span>
<span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;acctno&quot;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAcctno</span><span class="o">()</span> <span class="o">{</span>
<span class="k">return</span> <span class="n">acctno</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/**</span>
<span class="cm">* </span>
<span class="cm">* @param acctno</span>
<span class="cm">* The acctno</span>
<span class="cm">*/</span>
<span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;acctno&quot;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAcctno</span><span class="o">(</span><span class="kt">int</span> <span class="n">acctno</span><span class="o">)</span> <span class="o">{</span>
<span class="k">this</span><span class="o">.</span><span class="na">acctno</span> <span class="o">=</span> <span class="n">acctno</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/**</span>
<span class="cm">* </span>
<span class="cm">* @return</span>
<span class="cm">* The id</span>
<span class="cm">*/</span>
<span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
<span class="k">return</span> <span class="n">id</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/**</span>
<span class="cm">* </span>
<span class="cm">* @param id</span>
<span class="cm">* The id</span>
<span class="cm">*/</span>
<span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/**</span>
<span class="cm">* </span>
<span class="cm">* @return</span>
<span class="cm">* The name</span>
<span class="cm">*/</span>
<span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/**</span>
<span class="cm">* </span>
<span class="cm">* @param name</span>
<span class="cm">* The name</span>
<span class="cm">*/</span>
<span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>

<span class="nd">@JsonAnyGetter</span>
<span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getAdditionalProperties</span><span class="o">()</span> <span class="o">{</span>
<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">additionalProperties</span><span class="o">;</span>
<span class="o">}</span>

<span class="nd">@JsonAnySetter</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAdditionalProperty</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
<span class="k">this</span><span class="o">.</span><span class="na">additionalProperties</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
<span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<p>The next step is to create a package for any exceptions our client class might encounter. Create a package &quot;base-package&quot;.exception and the following classes to extend Exception:</p>

<ul>
<li>CIWiseRESTConnectorException</li>
<li>CIWiseRESTConnectorTokenExpiredException</li>
</ul>

<p>I&#39;m going to assume you don&#39;t need to see these, but you will need them. Now, we&#39;ll create the real nuts and bolts of the connector, the client class.</p>

<p>Create a package &quot;base-package&quot;.client and then create a class called RestClient. This class will implement the Jersey-client. I&#39;ll discuss the pieces of the class and share snippets as we go.</p>

<p>The connector class needs two public methods. These are:</p>

<p>*<em>Listing 8 - RestClient (public methods signatures) *</em></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    
    <span class="kd">public</span> <span class="n">Token</span> <span class="nf">getXAuthToken</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CIWiseRESTConnectorException</span><span class="o">,</span>
        <span class="n">CIWiseRESTConnectorTokenExpiredException</span> <span class="o">{</span>
        <span class="n">WebResource</span> <span class="n">webResource</span> <span class="o">=</span> <span class="n">getApiResource</span><span class="o">().</span><span class="na">path</span><span class="o">(</span><span class="s">&quot;api&quot;</span><span class="o">).</span><span class="na">path</span><span class="o">(</span>
                <span class="s">&quot;authenticate&quot;</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">executeAuthenticationPost</span><span class="o">(</span><span class="n">webResource</span><span class="o">,</span> <span class="n">Token</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="n">Account</span><span class="o">[]</span> <span class="nf">getAccounts</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CIWiseRESTConnectorException</span><span class="o">,</span>
    <span class="n">CIWiseRESTConnectorTokenExpiredException</span> <span class="o">{</span>

        <span class="n">WebResource</span> <span class="n">webResource</span> <span class="o">=</span> <span class="n">getApiResource</span><span class="o">().</span><span class="na">path</span><span class="o">(</span><span class="s">&quot;api&quot;</span><span class="o">).</span><span class="na">path</span><span class="o">(</span>
        <span class="s">&quot;genaccounts&quot;</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">execute</span><span class="o">(</span><span class="n">webResource</span><span class="o">,</span> <span class="s">&quot;GET&quot;</span><span class="o">,</span> <span class="n">Account</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span></code></pre></figure>

<p>We should talk about the connector class now and how it uses these methods to accomplish its goals. I&#39;ll address the connector lifecycle and how it relates to the Java annotations. Ultimately our goal is to run the Mule connector operation &quot;Get Accounts&quot;. We select that operation in the properties dialog for the custom connector in our Mule flow. This operation is defined here in the connector class.</p>

<p><strong>Listing 9 - CIWiseRESTConnector (key process method)</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="nd">@Processor</span><span class="o">(</span><span class="n">friendlyName</span><span class="o">=</span><span class="s">&quot;Get Accounts&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAccounts</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CIWiseRESTConnectorException</span><span class="o">,</span> <span class="n">CIWiseRESTConnectorTokenExpiredException</span> <span class="o">{</span>
        <span class="n">Account</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">getClient</span><span class="o">().</span><span class="na">getAccounts</span><span class="o">();</span>
        <span class="n">String</span> <span class="n">retStr</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="n">retStr</span> <span class="o">=</span> <span class="n">retStr</span> <span class="o">+</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getId</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getAcctno</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">;</span>
            
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">retStr</span><span class="o">;</span>
    <span class="o">}</span></code></pre></figure>

<p>Before the String listing of account names can be returned, the connector needs to be instantiated and then the lifecycle process begins. When the connector class is instantiated, a configuration class is also created and the configuration data is then available to the connector for whatever it needs. Next, the @Start annotation is inspected and the initialization method is processed.</p>

<p><strong>Listing 10 - CIWiseRESTConnector (@Start event)</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="nd">@Start</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setClient</span><span class="o">(</span><span class="k">new</span> <span class="nf">RestClient</span><span class="o">(</span><span class="k">this</span><span class="o">));</span>
    <span class="o">}</span>    </code></pre></figure>

<p>When the start event is processed, our client class gets created and the connector instance is passed in, giving access to the configuration data to the client. The Mule documentation calls is wrapping the client, but not exactly. It&#39;s not the Decorator pattern where the wrapper class provides a different class signature but with very little functionality. After the @Start annotation, the @Process operation that was selected in the connector&#39;s property dialog will be executed. I created an @Process method for getting the X-Auth token but only used it for testing. The next method called after @Start is getAccounts() (annotated with @Process).</p>

<p><strong>Listing 11 - CIWiseRESTConnector (@Process event)</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="nd">@Processor</span><span class="o">(</span><span class="n">friendlyName</span><span class="o">=</span><span class="s">&quot;Get Accounts&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAccounts</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CIWiseRESTConnectorException</span><span class="o">,</span> <span class="n">CIWiseRESTConnectorTokenExpiredException</span> <span class="o">{</span>
        <span class="n">Account</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">getClient</span><span class="o">().</span><span class="na">getAccounts</span><span class="o">();</span>
        <span class="n">String</span> <span class="n">retStr</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="n">retStr</span> <span class="o">=</span> <span class="n">retStr</span> <span class="o">+</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getId</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getAcctno</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">;</span>
            
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">retStr</span><span class="o">;</span>
    <span class="o">}</span></code></pre></figure>
 

<p>The connector calls getAccounts(), the client calls its getAccounts() and our client gets an array of Account Java objects. We can iterate over them and return a textual list of accounts to our browser when our connector is in use. The real work happens in the RestClient class. I&#39;ll describe things there now.</p>

<p>I&#39;ll start with the getAccounts() method in the client class. It calls upon the private method execute(). I&#39;ll provide the listing here.</p>

<p><strong>Listing 12 - RestClient (execute())</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="cm">/**</span>
<span class="cm">    * Executes an API request</span>
<span class="cm">    *</span>
<span class="cm">    */</span>
    <span class="kd">private</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">execute</span><span class="o">(</span><span class="n">WebResource</span> <span class="n">webResource</span><span class="o">,</span> <span class="n">String</span> <span class="n">method</span><span class="o">,</span>
            <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">returnClass</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="n">CIWiseRESTConnectorTokenExpiredException</span><span class="o">,</span>
            <span class="n">CIWiseRESTConnectorException</span> <span class="o">{</span>

        <span class="cm">/**</span>
<span class="cm">        * Call HTTP Method</span>
<span class="cm">        */</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">connector</span><span class="o">.</span><span class="na">getToken</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Token</span> <span class="n">token</span> <span class="o">=</span> <span class="n">getXAuthToken</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">token</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">connector</span><span class="o">.</span><span class="na">setToken</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">token</span><span class="o">.</span><span class="na">getToken</span><span class="o">());</span> 
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">ClientResponse</span> <span class="n">clientResponse</span> <span class="o">=</span> <span class="n">webResource</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span>
                <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">).</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;X-Auth-Token&quot;</span><span class="o">,</span> <span class="n">connector</span><span class="o">.</span><span class="na">getToken</span><span class="o">())</span>
                <span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">ClientResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">clientResponse</span><span class="o">.</span><span class="na">getStatus</span><span class="o">()</span> <span class="o">==</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">clientResponse</span><span class="o">.</span><span class="na">getEntity</span><span class="o">(</span><span class="n">returnClass</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">clientResponse</span><span class="o">.</span><span class="na">getStatus</span><span class="o">()</span> <span class="o">==</span> <span class="mi">401</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">CIWiseRESTConnectorTokenExpiredException</span><span class="o">(</span>
                    <span class="s">&quot;The access token has expired; &quot;</span>
                            <span class="o">+</span> <span class="n">clientResponse</span><span class="o">.</span><span class="na">getEntity</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">CIWiseRESTConnectorException</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
                    <span class="s">&quot;ERROR - statusCode: %d - message: %s&quot;</span><span class="o">,</span>
                    <span class="n">clientResponse</span><span class="o">.</span><span class="na">getStatus</span><span class="o">(),</span>
                    <span class="n">clientResponse</span><span class="o">.</span><span class="na">getEntity</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>
 

<p>You will notice that the initial logic is to check the connector for a not-null token. And, since we&#39;re calling the getAccounts() method, we won&#39;t have one. So we must get the token. The token comes by way of the executeAuthenticationPost() method that&#39;s somewhat similar to the execute() method. Its listing is here.</p>

<p><strong>Listing 13 - RestClient (executeAuthenticationPost())</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="cm">/**</span>
<span class="cm">    * Executes an authentication request via HTTP POST</span>
<span class="cm">    *</span>
<span class="cm">    */</span>
    
    <span class="kd">private</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">executeAuthenticationPost</span><span class="o">(</span><span class="n">WebResource</span> <span class="n">webResource</span><span class="o">,</span>
            <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">returnClass</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="n">CIWiseRESTConnectorTokenExpiredException</span><span class="o">,</span>
            <span class="n">CIWiseRESTConnectorException</span> <span class="o">{</span>

        <span class="c1">// Map query params for POST operation MultivaluedMap, MultivaluedMapImpl</span>
        
        <span class="n">MultivaluedMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">queryParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MultivaluedMapImpl</span><span class="o">();</span>
        <span class="n">queryParams</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">,</span>
                <span class="n">getConnector</span><span class="o">().</span><span class="na">getConfig</span><span class="o">().</span><span class="na">getUsername</span><span class="o">());</span>
        <span class="n">queryParams</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;password&quot;</span><span class="o">,</span>
                <span class="n">getConnector</span><span class="o">().</span><span class="na">getConfig</span><span class="o">().</span><span class="na">getPassword</span><span class="o">());</span>

        <span class="cm">/**</span>
<span class="cm">        * Call HTTP POST</span>
<span class="cm">        */</span>
        <span class="n">ClientResponse</span> <span class="n">clientResponse</span> <span class="o">=</span> <span class="n">webResource</span><span class="o">.</span><span class="na">queryParams</span><span class="o">(</span><span class="n">queryParams</span><span class="o">)</span>
                <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">).</span><span class="na">post</span><span class="o">(</span><span class="n">ClientResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">clientResponse</span><span class="o">.</span><span class="na">getStatus</span><span class="o">()</span> <span class="o">==</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">clientResponse</span><span class="o">.</span><span class="na">getEntity</span><span class="o">(</span><span class="n">returnClass</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">clientResponse</span><span class="o">.</span><span class="na">getStatus</span><span class="o">()</span> <span class="o">==</span> <span class="mi">401</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">CIWiseRESTConnectorTokenExpiredException</span><span class="o">(</span>
                    <span class="s">&quot;The access token has expired; &quot;</span>
                            <span class="o">+</span> <span class="n">clientResponse</span><span class="o">.</span><span class="na">getEntity</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">CIWiseRESTConnectorException</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
                    <span class="s">&quot;ERROR - statusCode: %d - message: %s&quot;</span><span class="o">,</span>
                    <span class="n">clientResponse</span><span class="o">.</span><span class="na">getStatus</span><span class="o">(),</span>
                    <span class="n">clientResponse</span><span class="o">.</span><span class="na">getEntity</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
        <span class="o">}</span>
    <span class="o">}</span></code></pre></figure>
 

<p>In this method we send the username and password on an HTTP POST request, in query parameters and the client response object populates the returnClass (Token.java). We never see the JSON deserialization because of the Jackson 1.x annotations on our entity objects. Once we have the token, we save the String token to be part of our /api/genaccounts request next. In listing 12 you will notice that we place the key &quot;X-Auth-Token&quot; and the actual token value on the HTTP header. We make the call and the same JSON deserialization into our Account object(s) occurs. This time the returnClass is Account[].class or an array of Account objects. This is what we needed to display our list of accounts.</p>

<p>You can check out my entire connector project at: <a href="https://github.com/ciwise/ci-wise-rest-connector">CIWiseRESTConnector</a> </p>

	  ]]></description>
	</item>


</channel>
</rss>
